[{{:uplevel.png?direct&20|}}](contents_rus)
[{{:flag_rus.png?direct&20|}}](soft_studio_scenario_syntax_rus)
[{{:flag_eng.png?direct&20|}}](soft_studio_scenario_syntax_rus)


====== Синтаксис команд Scenario Editor ======   

В Scenario Editor есть два компонента, которые содержат выражения: expressions и conditions. В обоих случаях могут использоваться константы, системные и пользовательские переменные. Системные переменные начинаются с префикса # (#now - время с начала игры, #rand - случайное число, #left - осталось времени, #total - всего времени). Пользовательские переменные начинаются с префикса $. Константы записываются следующим образом: переменные времени (time) в формате HH:MM:SS.m (например 01:12:05.4 - означает 1 час, 12 минут, 5 секунд, 4 миллисекунды); логические переменные (bool) принимают значения true/false; целые переменные принимают значения от -2147483648 до  2147483647.   



====== Выражения ======   

Выражения нужны для присвоения значения и записываются в формате: A = B + C, где A, B, C - переменная, B и C могут быть как переменными так и константами, а также A, B и C должны быть однотипными. Вместо знака + могут стоять -,*,/. Между всеми объектами и знаками необходимо ставить пробел. Рассмотрим на примерах (предположим есть шесть пользовательских переменных ival1, ival2 - int, tval1, tval2 - time, bval1, bval2 - boolean и четыре объекта электроники: pwm1, out1, ain1 и din1):  


**Int**:  
| $ival1 = 1008 | присвоить $ival1 к 1008 |    
| $ival1 = 5 + 6 | сумма констант |    
| $ival1 = $ival2 - 6 | разность переменной и константы |    
| $ival1 = 5 * 6 | произведение констант |    
| $ival1 = 20 / $ival1 | деление константы на переменную |    
| $ival1 = $ival2 + $ival1   | сумма переменных |    
| $ival1 = ain.ain1.state / 4 | использование объекта AIN с константой |    
| $ival1 = pwm.pwm1.state * 2 | использование объекта PWM с константой |    
| $ival1 = pwm.pwm1.state * $ival2 | использование объекта PWM с переменной |    
| $ival1 = #rand / 4 | поделить случайное число на 4 |    


**Bool**:  
| $bval1 = true | операция с константой |    
| $bval2 = false | операция с константой|    
| $bval1 = $bval2 | операция с переменной |    
| $bval1 = out.out1.state | использование объекта OUT |    
| $bval2 = din.din1.state | использование объекта DIN |    


**Time**:  
| $tval1 = 01:02:03.5 | операция с константой |    
| $tval1 = 01:02:03.5 + 00:01:04.0 | операция с константами |    
| $tval1 = #now | получить текущее время |    
| $tval1 = #now - 00:05:03.0 | получить время 5 минут и 3 секунды назад |    
| $tval1 = $tval2 + #now | получить время через $tval2 от текущего |    


====== Условия ======   

Условия нужны для сравнения и записываются в формате: A + B == C + D, где A, B, C - переменная, B и C могут быть как переменными так и константами, а также A, B и C должны быть однотипными. Вместо знака + могут стоять -,*,/, а вместо знака сравнения == могут быть >,<,>=,<=. Между всеми объектами и знаками необходимо ставить пробел. Рассмотрим на примерах (предположим есть шесть пользовательских переменных ival1, ival2 - int, tval1, tval2 - time, bval1, bval2 - boolean и четыре объекта электроники: pwm1, out1, ain1 и din1):  


**Int**:  
| $ival1 + 5 < 10 | истина, если $ival1 + 5 менее 10 |    
| $ival1 >= pwm.pwm1.state * 2 | истина, если $ival1 больше или равно pwm.pwm1.state * 2 |    
| $ival1 <= ain.ain1.state / 10 | истина, если $ival1 меньше или равно ain.ain1.state / 10 |    
| $ival1 == $ival2 - 5 | истина, если $ival1 равно $ival2 - 5 |    
| $ival1 + $ival2 > 15 | истина, если $ival1 + $ival2 больше 15 |    

**Bool**:  
| $bval1 == true | истина, если $bval1 равно true |      
| $bval2 == false | истина, если $bval1 равно false |      
| $bval1 == $bval2 | истина, если $bval1 равно $bval2 |    
| $bval1 == out.out1.state | истина, если $bval1 равно состоянию out1 |    
| $bval2 == din.din1.state | истина, если $bval2 равно состоянию din1 |    
| out.out1.state == true | истина, если out1 включена |    
| din.din1.state == false | истина, если din1 выключена |    
| din.din1.triggerhi == true | истина в момент включения din1 |    
| din.din1.triggerlo == true | истина в момент выключения din1 |    

**Time**:  
допустим мы сохранили время начала стадии (например в блоке init у stage) : $stagestart = #now  
| #now > $stagestart + 00:00:05.0 | истина, если прошло больше 5 секунд с начала стадии |  
| $tval1 == $stagestart + $tval2 | истина в момент ровно через время $tval2 с начала стадии |  

