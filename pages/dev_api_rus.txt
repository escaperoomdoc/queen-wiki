[{{:uplevel.png?direct&20|}}](contents_rus)
[{{:flag_rus.png?direct&20|}}](dev_api_rus)
[{{:flag_eng.png?direct&20|}}](dev_api_eng)

====== Queen API для разработчика ======

Данная статья описывает интерфейс взаимодействия с системой **QUEEN**.  



===== 1. Подключение к квест-менеджеру queen_room =====  
Подключение к системе queen_room осуществляется через обычный TCP сокет, т.е. **queen\_room** открывает слушающий сокет (по умолчанию на 0.0.0.0:4444) и ожидает соединения абонентов. Адрес **0.0.0.0:4444** может быть изменен в свойствах проекта (project:server атрибут). Подключиться к **queen\_room** возможно при помощи обычного терминала, например, [putty](https://www.putty.org) с параметрами сокета "Raw". **Примечание!** Для корректной работы терминала **putty** желательно выставить галочку "Implicit CR in every LF" в настройках "Terminal". В общем случае к **queen\_room** можно подключиться при помощи любой программы, используя командный интерфейс управления с открытым форматом: на входе - строковая команда, а на выходе - XML-документ.  

Общий формат следующий: например требуется запросить какую-либо информацию, на псевдокоде это будет выглядеть так:  
**getsmth** or **setsmth**, а в ответ сервер ответит следующим образом:  


response format:
```xml
<response type='getsmth' id='id' status='ok/error' time='HH:MM:SS.m'>TEXT</response>
```
**type** повторяет запрос, **id** - повторяет идентификатор запроса, на который дается **response**, **status** равен либо **ok**, либо **error** (в случае ошибки), **time** - параметр опциональный: если сценарий запущен, то **time** - это время сценария в формате HH:MM:SS.m (часы, минуты, секунды и десятая часть секунды), если сценарий не запущен или запрос не подразумевает время в ответе, то time либо не указывается, либо **time**='-'. **TEXT**  содержит либо строку ошибки, если **status='error'**, либо результат самого ответа, если **status='ok'**.  


Идентификатор задается в самом начале запроса в квадратных скобках. Например, если задается команда **[2467]getstates** (получить текущие состояния электроники), то в ответ на такую команду **queen room** выставит атрибут id='2467'. Если в команде отсутствует идентификатор запроса, например, просто **getstates**, то queen room выставит id='undefined'.  



===== 2. Команды получения статических состояний (STATIC) =====  


Здесь будут перечислены команды, которые получают данные от **queen\_room**, не осуществляя никаких управляющих воздействий. Данные команды будут далее называться **STATIC** и должны вызываться единожды при установлении связи с **queen\_room**, так как возвращают один и тот же результат.  



==== 2.1. STATIC : Получение файловой структуры ====  

формат: **getfs [filter]**, примеры команд:  

| **пример** | ** описание**  |
| getfs \*.\*  | получить все файловое дерево  |
| getfs \*.mp3,\*.wav,\*.ogg  | получить все звуковые файлы  |
| getfs \*.mef  | получить все макроэффекты  |

в ответ на эту команду **queen\_room** вышлет дерево файлов и каталогов относительно расположения **queen\_room** и глубже в формате XML, пример ответа:  

```xml
<response type='getfs' status='ok'>  
  <folder name='.'>  
    <folder name='macroeffects'>  
      <file name='lose.mef'/>  
      <file name='tune.mef'/>  
      <file name='win.mef'/>  
    </folder>  
    <folder name='media'>  
      <folder name='img'>  
      </folder>  
      <folder name='snd'>  
        <file name='sound check.mp3'/>  
      </folder>  
    </folder>  
    <folder name='scenarios'>  
      <file name='scenario.xml'/>  
    </folder>  
    <file name='room.xml'/>  
    <file name='queen_room'/>  
  </folder>  
</response>  
```

все файловое дерево представлено в виде структуры папок (тег 'folder') и файлов (тег 'file'). Вложенность тегов 'folder' определяет иерархию папок.



==== 2.2. STATIC : Получение файла описания комнаты room.xml ====  

формат: **getroom**, примеры команд:  

| **пример** | **описание**  |  
| getroom  | получить файл room.xml  |  

в ответ на эту команду **queen\_room** вышлет **room.xml** в [открытом формате XML](dummy), вложив room.xml в тэг response:
```xml
<response type='getroom' status='ok'>
<...room.xml...>
</response>
```

==== 2.3. STATIC : Получение дерева скриптов ====  

формат: **getscripts**, примеры команд:  

| **пример** | **описание**  |  
| getscripts  | получить дерево скриптов  |  

в ответ на эту команду **queen\_room** вышлет дерево скриптов в формате XML:

```xml
<response type='getscripts' status='ok'>  
  <macro name='m1.mef'></macro>
  <macro name='m2.mef'></macro>
  <macro name='m3.mef'></macro>
  <macro name='m4.mef'></macro>
  <macro name='m5.mef'></macro>
  <...other_macros...>
  <scenario name='scenario_1.xml' begin='stage_1'>
    <stage name='global'></stage>
    <stage name='stage_1' next='stage_2'></stage>
    <stage name='stage_2' next='stage_3'></stage>
    <...other_stages...>
    <stage name='stage_N' next=''></stage>
  </scenario>
  <...other_scenarios...>
</response>

```

тут следует подробнее остановиться на описании... итак, сначала идет перечисление всех макроэффектов для данного проекта (тэг **<macro>**). Каждый макроэффект содержит атрибут **name** - имя макроэффекта (по сути имя файла без расширения **mef**). Далее перечисляются все сценарии в тегах **<scenario>**. Каждый сценарий содержит атрибут **name** - имя сценария (по сути имя файла без расширения **xml**) и название начальной стадии (атрибут **begin**). В рамках сценария перечислены все стадии в тегах **<stage>**, каждая из которых имеет имя (атрибут **name**) и указатель на следующую стадию (атрибут **next**). Каждая стадия, включая и глобальную, содержат перечисление контекстных подсказок в тегах **<clue>**, а атрибут **macro** ссылается на соответствующий макроэффект. Поскольку подсказка - это макроэффект, то технически подсказкой может быть что угодно: от мигания лампочкой и проигрывания звука, до сложных эффектов с выдачей текстовых подсказок на **queen_tv**.



===== 3. Команды получения динамических состояний (DYNAMIC) =====  

Здесь будут перечислены команды, которые получают данные от **queen\_room**, не осуществляя никаких управляющих воздействий. Данные команды будут далее называться **DYNAMIC** и должны вызываться периодически после установления связи с **queen\_room** с целью получения текущих состояний различных объектов.  



==== 3.1. DYNAMIC : Получение отклика программы (ping) ====  

формат: **ping**, примеры команд:  

| **пример** | **описание**  |
| ping  | получить отклик  |

в ответ на эту команду **queen\_room** вышлет следующий ответ в формате XML:  

```xml
<response type='ping' status='ok'></response>  
```

Эта команда нужна просто для проверки связи с **queen\_room**.


==== 3.2. DYNAMIC : Получение состояния объектов комнаты ====  

формат: **get [type.object.attribute]**, примеры команд:  

| **пример**  | **описание**  |
| get din.startbutton.state  | получить состояние дискретного входа для кнопки 'startbutton'  |
| get out.cachelock.state  | получить состояние дискретного выхода (реле) электромагнитного замка тайника 'cachelock'  |
| get ain.photosensor.state  | получить состояние аналогового входа датчика photosensor  |
| get pwm.led.state  | получить состояние яркости (ШИМ-сигнала) светильника led  |
| get pwm.led.strobo  | получить состояние флага стробоскопа (ШИМ-сигнала) светильника led  |
| get uni.rfid1.state  | получить состояние uni-объекта бесконтактного датчика rfid1  |
| get var.somevar.state  | получить состояние переменной somevar  |

в ответ на эту команду **queen\_room** вышлет состояния всех объектов комнаты в формате XML, примеры:  

```xml
<response type='get din.startbutton.state' status='ok'>on</response>  
<response type='get out.cachelock.state' status='ok'>off</response>  
<response type='get ain.photosensor.state' status='ok'>980</response>  
<response type='get pwm.led.state' status='ok'>255</response>  
<response type='get pwm.led.strobo' status='ok'>high</response>  
<response type='get uni.rfid1.state' status='ok'>236728347</response>  
```

или индицирует ошибку, если что-то введено неверно (см.п.1.)  



==== 3.3. DYNAMIC : Получение состояния всех объектов комнаты ====  

формат: **getstates**, примеры команд:  

| **пример** | **описание**  |  
| getstates  | получить состояния всех объектов комнаты  |  

в ответ на эту команду **queen\_room** вышлет состояния всех объектов комнаты в формате XML, пример:  

```xml
<response type='getstates' status='ok'>
  <item type='pwm' obj='pwm1' attr='state' value='128'/>
  <item type='out' obj='out1' attr='state' value='on'/>
  <...>
</response>
```



==== 3.4. DYNAMIC : Получение состояние текущего режима и стадии ====  

формат: **getmode**, примеры команд:  

| **пример** | **описание**  |  
| getmode  | получить состояние текущего режима и стадии  |  

в ответ на эту команду **queen\_room** вышлет состояние текущего режима и стадии в формате XML, примеры:  

```xml
<response type='getmode' status='ok'>idle</response>
<response type='getmode' status='ok'>tune</response>
<response type='getmode' status='ok'>ready</response>
<response type='getmode' status='ok'>win</response>
<response type='getmode' status='ok'>lose</response>
<response type='getmode' status='ok'>godmode:stage</response>
<response type='getmode' status='ok'>playing:stage</response>
<response type='getmode' status='ok'>paused:stage</response>
```

выше перечислены режимы: **idle** - простой (квест в ручном режиме, сценарий выключен), **tune** - перезарядка, **ready** - готовность сценария, **win** - квест окончен в состоянии победы, **lose** - квест окончен в состоянии поражения; далее приведены три режима, которые описывают игровые режимы через разделитель ":" с указанием текущей стадии сценария, где **godmode** - режим бога (время не идет, но все работает), **playing** - обычный режим проигрывания сценария с обратным таймером и **paused** - режим паузы игры, где все как бы "замирает", а **stage** - наименование текущей стадии.



===== 4. Команды управления (CONTROL) =====  

Здесь будут перечислены команды, которые управляют состояниями **queen\_room**. Данные команды будут далее называться **CONTROL**.  



==== 4.1. CONTROL: установка значения переменных и объектов электроники ====  

формат: **set [type.object.attribute] [value]**, примеры команд:  

| **пример**  | **описание**  |
| set din.startbutton.state on  | установить состояние дискретного входа для кнопки 'startbutton'  |
| set out.cachelock.state off  | установить состояние дискретного выхода (реле) электромагнитного замка тайника 'cachelock'  |
| set ain.photosensor.state 980  | установить состояние аналогового входа датчика photosensor  |
| set pwm.led.state 255  | установить состояние яркости (ШИМ-сигнала) светильника led  |
| set pwm.led.strobo 1 | установить состояние флага стробоскопа (ШИМ-сигнала) светильника led  |
| set uni.rfid1.state 236728347 | установить состояние uni-объекта бесконтактного датчика rfid1  |
| set var.somevar.state 16500  | установить состояние переменной somevar  |

в ответ на эту команду **queen\_room** вышлет обычный результат команды в формате XML: ok или error  




==== 4.2. CONTROL: управление сценарием и переходами ====  

формат: **setmode [name]**, примеры команд:  

| **пример**  | **описание**  |
| setmode idle  | сбросить сценарий  |
| setmode tune  | перейти в режим наладки  |
| setmode ready  | перейти в режим готовности  |
| setmode playing  | начать сцерарий  |
| setmode paused  | остановить сценарий  |
| setmode godmode  | перейти в режим бога  |
| setmode win  | принудительная победа  |
| setmode lose  | принудительное поражение  |

в ответ на эту команду **queen\_room** вышлет обычный результат команды в формате XML: ok/error  



==== 4.3. CONTROL: пропуск текущей стадии ====  

формат: **skipstage**, примеры команд:  

| **пример**  | **описание**  |
| skipstage  | пропуск текущей стадии  |

в ответ на эту команду **queen\_room** вышлет обычный результат команды в формате XML: ok/error  



==== 4.4. CONTROL: проигрывание макроэффектов ====  

формат: **play [macroeffect.mef]**, примеры команд:  

| **пример**  | **описание**  |
| play sarcofagopen.mef  | проиграть макроэффект sarcofagopen.mef  |

в ответ на эту команду **queen\_room** вышлет обычный результат команды в формате XML: ok или error  



==== 4.5. CONTROL: установка текущего языка ====  

формат: **setlanguage [name]**, примеры команд:  

| **пример**  | **описание**  |
| setlanguage rus  | установить русский язык  |
| setlanguage eng  | установить английский язык  |

в ответ на эту команду **queen\_room** вышлет обычный результат команды в формате XML: ok/error  



==== 4.6. CONTROL: установка текущего сценария ====  

формат: **setscenario [name]**, примеры команд:  

| **пример**  | **описание**  |
| setscenario christmas | установить рождественский сценарий  |
| setscenario children  | установить детский сценарий  |
| setscenario scary  | установить страшный сценарий  |

в ответ на эту команду **queen\_room** вышлет обычный результат команды в формате XML: ok или error  



==== 4.7. CONTROL: установка имени абонента ====  

формат: **setname name**, примеры команд:  

| **пример**  | **описание**  |
| setname backend | установить имя backend  |
| setname putty  | установить имя putty  |

в ответ на эту команду **queen\_room** вышлет обычный результат команды в формате XML: ok или error  



==== 4.8. CONTROL: отправка сообщения абонентам ====  

формат: **send abonent 'text'**, примеры команд:  

| **пример**  | **описание**  |
| send all 'hello everyone' | отправить **hello everyone** всем абонентам |
| send subscribed 'hello subscribers' | отправить **hello subscribers** всем подписавшимся абонентам (см.п.5) |
| send putty 'hello friend'  | отправить абоненту по имени **putty** приветствие **hello friend** |

Важно! Текст **text** может содержать пробелы, поэтому его необходимо заключить в одинарные кавычки. Внутри текста использование одинарных кавычек недопсутимо. В ответ на эту команду **queen\_room** вышлет обычный результат команды в формате XML: ok или error. А целевому абоненту(ам) будет передано сообщение в следующем формате:  

```xml
<response type='event:send' status='ok' time='XX:XX:XX.X'>text</response>
```



===== 5. Получение динамических состояний в событийном режиме (EVENTS) =====  

Некоторые состояния целесообразно получать по изменениям, а не постоянно опрашивая сервер. Для этого нужно подписаться на рассылку событий, формат: **subscribe**:  

| **пример** | **описание**  |  
| subscribe  | подписаться на поток событий  |  

в ответ на эту команду **queen\_room** вышлет результат команды в формате XML:  

```xml
<response type='subscribe' status='ok'></response>  
```

ну и обратная команда позволяет отписаться от потока событий, формат: **unsubscribe**:  

| **пример** | **описание**  |  
| unsubscribe  | отписаться от потока событий  |  

в ответ на эту команду **queen\_room** вышлет результат команды в формате XML:  

```xml
<response type='unsubscribe' status='ok'></response>  
```

**сами события будут передаваться уже асинхронно для клиента также в XML формате:**  

```xml
<response type='type' status='ok' time='HH:MM:SS.MS'>text</response>  
```

если квест запущен, то время указывает время квеста в формате HH:MM:SS.MS; если нет, то time='-'

сразу за ответом на subscribe пересылаются начальные состояния (responses 5.1-5.4) по очевидным причинам, а только потом следуют изменения в контексте подписки.


итак возможные варианты событий (event)...  


==== 5.1. Изменение режима игры (mode) ==== 

Возможные варианты:

```xml
<response type='event:mode' status='ok' time='HH:MM:SS.MS'>idle</response>
<response type='event:mode' status='ok' time='HH:MM:SS.MS'>tune</response>
<response type='event:mode' status='ok' time='HH:MM:SS.MS'>ready</response>
<response type='event:mode' status='ok' time='HH:MM:SS.MS'>win</response>
<response type='event:mode' status='ok' time='HH:MM:SS.MS'>lose</response>
<response type='event:mode' status='ok' time='HH:MM:SS.MS'>godmode</response>
<response type='event:mode' status='ok' time='HH:MM:SS.MS'>playing</response>
<response type='event:mode' status='ok' time='HH:MM:SS.MS'>paused</response>
```


==== 5.2. Изменение стадии сценария (stage) ==== 

Возможные варианты:

```xml
<response type='event:stage' status='ok' time='HH:MM:SS.MS'>oldstage:newstage:reason</response>  
```

синтаксис простой - через разделитель ":" передаются имя старой стадии **oldstage**, имя новой стадии **newstage** и  причина перехода **reason**. Причины возможны две на текущий момент: пропуск шага **skip** и естественное решение загадки **resolved**. **Внимание!** При инициализации (т.е. когда клиент подключается к queen_room) вместо формата oldstage:newstage:reason передается просто newstage.



==== 5.3. Изменение сценария (scenario) ==== 

Возможные варианты:

```xml
<response type='event:scenario' status='ok' time='HH:MM:SS.MS'>scenario_name</response>  
```

scenario_name - это имя сценария из запроса **getscripts**



==== 5.4. Изменение языка (language) ==== 

Возможные варианты:

```xml
<response type='event:language' status='ok' time='HH:MM:SS.MS'>rus</response>  
<response type='event:language' status='ok' time='HH:MM:SS.MS'>eng</response>  
<response type='event:language' status='ok' time='HH:MM:SS.MS'>esp</response>  
<response type='event:language' status='ok' time='HH:MM:SS.MS'>ita</response>  
```

наименование языка передается внутри тэга



==== 5.5. Уведомления (notifications) ====

Возможные варианты:

```xml
<response type='event:reminder' status='ok' time='HH:MM:SS.MS'>text</response>  
<response type='event:json' status='ok' time='HH:MM:SS.MS'>text in json format</response>  
```

Уведомления генерируются, когда в компоненте типа logger текст сообщения начинается с ключевого слова :reminder: или :json:. А в поле **text** сообщения-XML вставляется строка, которая следует за любым из вышеуказанных ключевых слов. Тип reminder используется для отправки уведомления с обычной строкой, а для отправки JSON используется ключевое поле :json:   


Для уведомлений с типом type='event:json' нужно указать JSON объект в качестве тела сообщения. То есть если в logger строка имеет вид **:json:{"type":"http","method":"post","url":"http://localhost/api/test", "payload":targetJSON}**, то в поле **text** XML-сообщения будет вставлен JSON:  

```
{"type":"http","method":"post","url":"targetUrl", "payload":targetJSON}  
```

этот функционал следует использовать для эффективной увязки **queen room** с web приложениями, в частности с компонентом **queen bridge**, входящим в состав инфраструктуры **queen web**.   







